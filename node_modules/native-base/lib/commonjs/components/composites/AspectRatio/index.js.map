{"version":3,"sources":["index.tsx"],"names":["AspectView","props","ref","layout","setLayout","React","useState","inputStyle","StyleSheet","flatten","style","width","height","push","aspectRatio","nativeEvent","inLayout","AspectRatio","ratio","children","resolvedProps","resolveResponsively","computedStyle","newChildWithProps","cloneElement","absoluteFillObject","Platform","OS"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAGA,MAAMA,UAAU,gBAAG,uBAAW,CAACC,KAAD,EAAaC,GAAb,KAA2B;AACvD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,eAAMC,QAAN,EAA5B;;AACA,QAAMC,UAAU,GAAG,CAACC,wBAAWC,OAAX,CAAmBR,KAAK,CAACS,KAAzB,KAAmC,EAApC,CAAnB;;AACA,MAAIP,MAAJ,EAAY;AACV;AACA,QAAI;AAAEQ,MAAAA,KAAK,GAAG,CAAV;AAAaC,MAAAA,MAAM,GAAG;AAAtB,QAA4BT,MAAhC;;AACA,QAAIQ,KAAK,KAAK,CAAd,EAAiB;AACfJ,MAAAA,UAAU,CAACM,IAAX,CAAgB;AAAEF,QAAAA,KAAK,EAAEC,MAAM,GAAGX,KAAK,CAACa,WAAxB;AAAqCF,QAAAA;AAArC,OAAhB;AACD,KAFD,MAEO;AACLL,MAAAA,UAAU,CAACM,IAAX,CAAgB;AAAEF,QAAAA,KAAF;AAASC,QAAAA,MAAM,EAAED,KAAK,GAAGV,KAAK,CAACa;AAA/B,OAAhB;AACD;AACF;;AAED,sBACE,6BAAC,YAAD,eACMb,KADN;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,KAAK,EAAEK,UAHT;AAIE,IAAA,QAAQ,EAAE,CAAC;AAAEQ,MAAAA,WAAW,EAAE;AAAEZ,QAAAA,MAAM,EAAEa;AAAV;AAAf,KAAD,KACRZ,SAAS,CAACY,QAAD;AALb,KADF;AAUD,CAvBkB,CAAnB;;AAyBA,MAAMC,WAAW,GAAG,CAAChB,KAAD,EAA2BC,GAA3B,KAAyC;AAAA;;AAC3D,QAAM;AACJQ,IAAAA,KADI;AAEJQ,IAAAA,KAFI;AAGJC,IAAAA,QAAQ,gBAAG,2DAHP;AAIJ,OAAGC;AAJC,MAKF,+BACF,aADE,EAEFnB,KAFE,EAGF,EAHE,EAIF;AAAEoB,IAAAA,mBAAmB,EAAE,CAAC,OAAD;AAAvB,GAJE,CALJ;AAWA,MAAIC,aAAoC,GAAGZ,KAA3C;;AACA,QAAMa,iBAAiB,gBAAGlB,eAAMmB,YAAN,CACxBL,QADwB,EAExB,EACE,IAAGA,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAElB,KAAb,CADF;AAEES,IAAAA,KAAK,EAAEF,wBAAWiB;AAFpB,GAFwB,EAMxBN,QANwB,aAMxBA,QANwB,0CAMxBA,QAAQ,CAAElB,KANc,oDAMxB,gBAAiBkB,QANO,CAA1B,CAb2D,CAsB3D;;;AACA,MAAI,kDAAsBC,aAAtB,CAAJ,EAA0C;AACxC,WAAO,IAAP;AACD,GAzB0D,CA0B3D;;;AACA,MAAIM,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,wBACE,6BAAC,UAAD,eACMP,aADN;AAEE,MAAA,WAAW,EAAEF,KAFf;AAGE,MAAA,KAAK,EAAER,KAHT;AAIE,MAAA,GAAG,EAAER;AAJP,QAMGqB,iBANH,CADF;AAUD,GAXD,MAWO;AACLD,IAAAA,aAAa,GAAGd,wBAAWC,OAAX,CAAmB,CAACC,KAAD,EAAQ;AAAEI,MAAAA,WAAW,EAAEI;AAAf,KAAR,CAAnB,CAAhB;AACA,wBACE,6BAAC,YAAD,eAASE,aAAT;AAAwB,MAAA,KAAK,EAAEE,aAA/B;AAA8C,MAAA,GAAG,EAAEpB;AAAnD,QACGqB,iBADH,CADF;AAKD;AACF,CA9CD;;4BAgDe,+BAAK,uBAAWN,WAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nimport type { IAspectRatioProps } from './types';\n\nconst AspectView = forwardRef((props: any, ref?: any) => {\n  const [layout, setLayout] = React.useState();\n  const inputStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let { width = 0, height = 0 } = layout;\n    if (width === 0) {\n      inputStyle.push({ width: height * props.aspectRatio, height });\n    } else {\n      inputStyle.push({ width, height: width / props.aspectRatio });\n    }\n  }\n\n  return (\n    <Box\n      {...props}\n      ref={ref}\n      style={inputStyle}\n      onLayout={({ nativeEvent: { layout: inLayout } }: any) =>\n        setLayout(inLayout)\n      }\n    />\n  );\n});\n\nconst AspectRatio = (props: IAspectRatioProps, ref?: any) => {\n  const {\n    style,\n    ratio,\n    children = <></>,\n    ...resolvedProps\n  } = usePropsResolution(\n    'AspectRatio',\n    props,\n    {},\n    { resolveResponsively: ['ratio'] }\n  );\n  let computedStyle: ViewStyle | undefined = style;\n  const newChildWithProps = React.cloneElement(\n    children,\n    {\n      ...children?.props,\n      style: StyleSheet.absoluteFillObject,\n    },\n    children?.props?.children\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n  if (Platform.OS === 'web') {\n    return (\n      <AspectView\n        {...resolvedProps}\n        aspectRatio={ratio}\n        style={style}\n        ref={ref}\n      >\n        {newChildWithProps}\n      </AspectView>\n    );\n  } else {\n    computedStyle = StyleSheet.flatten([style, { aspectRatio: ratio }]);\n    return (\n      <Box {...resolvedProps} style={computedStyle} ref={ref}>\n        {newChildWithProps}\n      </Box>\n    );\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));\n"]}