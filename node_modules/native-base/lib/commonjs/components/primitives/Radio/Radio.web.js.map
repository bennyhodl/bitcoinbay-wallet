{"version":3,"sources":["Radio.web.tsx"],"names":["RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","React","useRef","mergedRefs","focusProps","_interactionBox","_icon","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","sizedIcon","cloneElement","component","transition","Radio","formControlContext","contextState","useContext","RadioContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      // const mergedWrapperRef = React.useMemo(() => mergeRefs([wrapperRef, _ref]), []);\n\n      const { _interactionBox, _icon, ...resolvedProps } = usePropsResolution(\n        'Radio',\n        combinedProps,\n        {\n          isInvalid,\n          isReadOnly,\n          isFocusVisible: isFocusVisibleProp || isFocusVisible,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered: isHoveredProp || isHovered,\n        }\n      );\n\n      const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Box\n          flexDirection=\"row\"\n          alignItems=\"center\"\n          {...layoutProps}\n          opacity={isDisabled ? 0.4 : 1}\n          cursor={isDisabled ? 'not-allowed' : 'pointer'}\n        >\n          <Center>\n            {/* Interaction Box */}\n            <Box\n              {..._interactionBox}\n              style={{\n                // @ts-ignore - only for web\"\n                transition: 'height 200ms, width 200ms',\n              }}\n              h={\n                isFocusVisible ||\n                isFocusVisibleProp ||\n                isHovered ||\n                isHoveredProp\n                  ? '200%'\n                  : '100%'\n              }\n              w={\n                isFocusVisible ||\n                isFocusVisibleProp ||\n                isHovered ||\n                isHoveredProp\n                  ? '200%'\n                  : '100%'\n              }\n              pointerEvents=\"none\"\n            />\n            {/* Radio */}\n            <Center {...nonLayoutProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {children}\n        </Box>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      // console.log(inputProps, focusProps, ref);\n      // return null;\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // console.log('radio', radioState);\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}